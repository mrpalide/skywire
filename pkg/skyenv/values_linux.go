//go:build linux
// +build linux

package skyenv

import (
	"periph.io/x/periph/host/distro"
)

const (
	//OS detection at runtime
	OS = "linux"
	// SkywirePath is the path to the installation folder for the linux packages.
	SkywirePath = "/opt/skywire"
	// ConfigJSON is the config name generated by the skywire-autocofig script in the linux packages
	ConfigJSON = "skywire.json"
)

// PackageConfig contains installation paths (for linux)
func PackageConfig() PkgConfig {
	pkgConfig := PkgConfig{
		Launcher: Launcher{
			BinPath: "/opt/skywire/apps",
		},
		LocalPath: "/opt/skywire/local",
		Hypervisor: Hypervisor{
			DbPath:     "/opt/skywire/users.db",
			EnableAuth: true,
		},
	}
	return pkgConfig
}

// UserConfig contains installation paths (for linux)
func UserConfig() PkgConfig {
	usrConfig := PkgConfig{
		Launcher: Launcher{
			BinPath: "/opt/skywire/apps",
		},
		LocalPath: HomePath() + "/.skywire/local",
		Hypervisor: Hypervisor{
			DbPath:     HomePath() + "/.skywire/users.db",
			EnableAuth: true,
		},
	}
	return usrConfig
}

// UpdateCommand returns the commands which are run when the update button is clicked in the ui
func UpdateCommand() []string {
	if distro.IsArmbian() || distro.IsDebian() || distro.IsRaspbian() || distro.IsUbuntu() {
		//enabling install-skyire.service and rebooting is required to avoid interrupting an update when the running visor is stopped
		//install-skywire.service is provided by the skybian package and calls install-skywire.sh
		return []string{`systemctl enable install-skywire.service && systemctl reboot || echo -e "Resource unavailable.\nPlease update manually as specified here:\nhttps://github.com/skycoin/skywire/wiki/Skywire-Package-Installation"`}
	}
	return []string{`echo -e "Update not implemented for this linux distro.\nPlease update skywire the same way you installed it."`}
}
